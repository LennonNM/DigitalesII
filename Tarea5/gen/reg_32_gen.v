/* Generated by Yosys 0.7 (git sha1 61f6811, i686-w64-mingw32.static-gcc 4.9.3 -Os) */
`timescale 1ns/1ps

(* src = "mux.v:1" *)
module mux(din_0, din_1, d, out);
  (* src = "mux.v:3" *)
  input d;
  (* src = "mux.v:3" *)
  input din_0;
  (* src = "mux.v:3" *)
  input din_1;
  (* src = "mux.v:4" *)
  output out;
  assign out = d ? din_1 : din_0;
endmodule

(* src = "mux4.v:1" *)
module mux4(din_0, din_1, din_2, din_3, d, m, out);
  wire _0_;
  wire _1_;
  (* src = "mux4.v:3" *)
  input d;
  (* src = "mux4.v:3" *)
  input din_0;
  (* src = "mux4.v:3" *)
  input din_1;
  (* src = "mux4.v:3" *)
  input din_2;
  (* src = "mux4.v:3" *)
  input din_3;
  (* src = "mux4.v:4" *)
  input [1:0] m;
  (* src = "mux4.v:5" *)
  output out;
  assign _0_ = d ? din_1 : din_0;
  assign _1_ = d ? din_3 : din_2;
  assign out = m[0] ? _1_ : _0_;
endmodule

(* src = "reg_desp.v:1" *)
module reg_desp(Q, S_OUT, CLK, ENB, DIR, S_IN, MODO, D);
  (* src = "reg_desp.v:25" *)
  wire [3:0] _00_;
  (* src = "reg_desp.v:25" *)
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  (* src = "reg_desp.v:3" *)
  input CLK;
  (* src = "reg_desp.v:5" *)
  input [3:0] D;
  (* src = "reg_desp.v:3" *)
  input DIR;
  (* src = "reg_desp.v:3" *)
  input ENB;
  (* src = "reg_desp.v:4" *)
  input [1:0] MODO;
  (* init = 4'b0000 *)
  (* src = "reg_desp.v:6" *)
  output [3:0] Q;
  reg [3:0] Q;
  initial Q = 4'b0000;
  (* src = "reg_desp.v:3" *)
  input S_IN;
  (* src = "reg_desp.v:7" *)
  output S_OUT;
  reg S_OUT;
  assign _02_ = ~MODO[1];
  assign _03_ = ~(MODO[0] & _02_);
  assign _04_ = MODO[0] | MODO[1];
  assign _05_ = ~(_04_ & _03_);
  assign _06_ = ~Q[1];
  assign _07_ = ~Q[3];
  assign _08_ = DIR ? _06_ : _07_;
  assign _09_ = ~S_IN;
  assign _10_ = DIR ? _06_ : _09_;
  assign _11_ = ~((_08_ | _03_) & (_04_ | _10_));
  assign _00_[0] = _05_ ? _11_ : D[0];
  assign _12_ = ~Q[0];
  assign _13_ = ~Q[2];
  assign _14_ = DIR ? _13_ : _12_;
  assign _15_ = ~((_04_ & _03_) | _14_);
  assign _00_[1] = _05_ ? _15_ : D[1];
  assign _16_ = DIR ? _07_ : _06_;
  assign _17_ = ~((_04_ & _03_) | _16_);
  assign _00_[2] = _05_ ? _17_ : D[2];
  assign _18_ = DIR ? _12_ : _13_;
  assign _19_ = DIR ? _09_ : _13_;
  assign _20_ = ~((_18_ | _03_) & (_04_ | _19_));
  assign _00_[3] = _05_ ? _20_ : D[3];
  assign _21_ = DIR ? Q[0] : Q[3];
  assign _01_ = _04_ ? S_OUT : _21_;
  (* src = "reg_desp.v:25" *)
  always @(posedge CLK)
      Q[0] <= _00_[0];
  (* src = "reg_desp.v:25" *)
  always @(posedge CLK)
      Q[1] <= _00_[1];
  (* src = "reg_desp.v:25" *)
  always @(posedge CLK)
      Q[2] <= _00_[2];
  (* src = "reg_desp.v:25" *)
  always @(posedge CLK)
      Q[3] <= _00_[3];
  (* src = "reg_desp.v:25" *)
  always @(posedge CLK)
      S_OUT <= _01_;
endmodule

(* top =  1  *)
(* src = "reg_desp_32.v:5" *)
module reg_desp_32(Q32, S_OUT32, CLK32, ENB32, DIR32, S_IN32, MODO32, D32);
  (* src = "reg_desp_32.v:8" *)
  input CLK32;
  (* src = "reg_desp_32.v:10" *)
  input [31:0] D32;
  (* src = "reg_desp_32.v:8" *)
  input DIR32;
  (* src = "reg_desp_32.v:8" *)
  input ENB32;
  (* src = "reg_desp_32.v:9" *)
  input [1:0] MODO32;
  (* src = "reg_desp_32.v:11" *)
  output [31:0] Q32;
  (* src = "reg_desp_32.v:8" *)
  input S_IN32;
  (* src = "reg_desp_32.v:12" *)
  output S_OUT32;
  (* src = "reg_desp_32.v:22" *)
  wire wCLK32;
  (* src = "reg_desp_32.v:23" *)
  wire [31:0] wD32;
  (* src = "reg_desp_32.v:22" *)
  wire wDIR32;
  (* src = "reg_desp_32.v:22" *)
  wire wENB32;
  (* src = "reg_desp_32.v:24" *)
  wire [1:0] wMODO32;
  (* src = "reg_desp_32.v:23" *)
  wire [31:0] wQ32;
  (* src = "reg_desp_32.v:15" *)
  wire wR1Q0;
  (* src = "reg_desp_32.v:15" *)
  wire wR1Q3;
  (* src = "reg_desp_32.v:19" *)
  wire wR1SIN;
  (* src = "reg_desp_32.v:15" *)
  wire wR2Q0;
  (* src = "reg_desp_32.v:15" *)
  wire wR2Q3;
  (* src = "reg_desp_32.v:19" *)
  wire wR2SIN;
  (* src = "reg_desp_32.v:15" *)
  wire wR3Q0;
  (* src = "reg_desp_32.v:15" *)
  wire wR3Q3;
  (* src = "reg_desp_32.v:19" *)
  wire wR3SIN;
  (* src = "reg_desp_32.v:15" *)
  wire wR4Q0;
  (* src = "reg_desp_32.v:16" *)
  wire wR4Q3;
  (* src = "reg_desp_32.v:19" *)
  wire wR4SIN;
  (* src = "reg_desp_32.v:16" *)
  wire wR5Q0;
  (* src = "reg_desp_32.v:16" *)
  wire wR5Q3;
  (* src = "reg_desp_32.v:19" *)
  wire wR5SIN;
  (* src = "reg_desp_32.v:16" *)
  wire wR6Q0;
  (* src = "reg_desp_32.v:16" *)
  wire wR6Q3;
  (* src = "reg_desp_32.v:20" *)
  wire wR6SIN;
  (* src = "reg_desp_32.v:16" *)
  wire wR7Q0;
  (* src = "reg_desp_32.v:16" *)
  wire wR7Q3;
  (* src = "reg_desp_32.v:20" *)
  wire wR7SIN;
  (* src = "reg_desp_32.v:17" *)
  wire wR8Q0;
  (* src = "reg_desp_32.v:17" *)
  wire wR8Q3;
  (* src = "reg_desp_32.v:20" *)
  wire wR8SIN;
  (* src = "reg_desp_32.v:22" *)
  wire wS_IN32;
  (* src = "reg_desp_32.v:22" *)
  wire wS_OUT32;
  assign wMODO32[0] = MODO32[1] & MODO32[0];
  (* src = "reg_desp_32.v:61" *)
  mux4 m1 (
    .d(DIR32),
    .din_0(wQ32[27]),
    .din_1(S_IN32),
    .din_2(wQ32[27]),
    .din_3(wQ32[0]),
    .m(MODO32),
    .out(wR1SIN)
  );
  (* src = "reg_desp_32.v:63" *)
  mux m2 (
    .d(DIR32),
    .din_0(wQ32[23]),
    .din_1(wQ32[28]),
    .out(wR2SIN)
  );
  (* src = "reg_desp_32.v:65" *)
  mux m3 (
    .d(DIR32),
    .din_0(wQ32[19]),
    .din_1(wQ32[24]),
    .out(wR3SIN)
  );
  (* src = "reg_desp_32.v:67" *)
  mux m4 (
    .d(DIR32),
    .din_0(wQ32[15]),
    .din_1(wQ32[20]),
    .out(wR4SIN)
  );
  (* src = "reg_desp_32.v:69" *)
  mux m5 (
    .d(DIR32),
    .din_0(wQ32[11]),
    .din_1(wQ32[16]),
    .out(wR5SIN)
  );
  (* src = "reg_desp_32.v:71" *)
  mux m6 (
    .d(DIR32),
    .din_0(wQ32[7]),
    .din_1(wQ32[12]),
    .out(wR6SIN)
  );
  (* src = "reg_desp_32.v:73" *)
  mux m7 (
    .d(DIR32),
    .din_0(wQ32[3]),
    .din_1(wQ32[8]),
    .out(wR7SIN)
  );
  (* src = "reg_desp_32.v:76" *)
  mux4 m8 (
    .d(DIR32),
    .din_0(S_IN32),
    .din_1(wQ32[4]),
    .din_2(wQ32[31]),
    .din_3(wQ32[4]),
    .m(MODO32),
    .out(wR8SIN)
  );
  (* src = "reg_desp_32.v:58" *)
  mux mOUT (
    .d(DIR32),
    .din_0(wQ32[31]),
    .din_1(wQ32[0]),
    .out(wS_OUT32)
  );
  (* src = "reg_desp_32.v:59" *)
  reg_desp reg1 (
    .CLK(CLK32),
    .D(D32[31:28]),
    .DIR(DIR32),
    .ENB(ENB32),
    .MODO({ MODO32[1], wMODO32[0] }),
    .Q(wQ32[31:28]),
    .S_IN(wR1SIN),
    .S_OUT()
  );
  (* src = "reg_desp_32.v:62" *)
  reg_desp reg2 (
    .CLK(CLK32),
    .D(D32[27:24]),
    .DIR(DIR32),
    .ENB(ENB32),
    .MODO({ MODO32[1], wMODO32[0] }),
    .Q(wQ32[27:24]),
    .S_IN(wR2SIN),
    .S_OUT()
  );
  (* src = "reg_desp_32.v:64" *)
  reg_desp reg3 (
    .CLK(CLK32),
    .D(D32[23:20]),
    .DIR(DIR32),
    .ENB(ENB32),
    .MODO({ MODO32[1], wMODO32[0] }),
    .Q(wQ32[23:20]),
    .S_IN(wR3SIN),
    .S_OUT()
  );
  (* src = "reg_desp_32.v:66" *)
  reg_desp reg4 (
    .CLK(CLK32),
    .D(D32[19:16]),
    .DIR(DIR32),
    .ENB(ENB32),
    .MODO({ MODO32[1], wMODO32[0] }),
    .Q(wQ32[19:16]),
    .S_IN(wR4SIN),
    .S_OUT()
  );
  (* src = "reg_desp_32.v:68" *)
  reg_desp reg5 (
    .CLK(CLK32),
    .D(D32[15:12]),
    .DIR(DIR32),
    .ENB(ENB32),
    .MODO({ MODO32[1], wMODO32[0] }),
    .Q(wQ32[15:12]),
    .S_IN(wR5SIN),
    .S_OUT()
  );
  (* src = "reg_desp_32.v:70" *)
  reg_desp reg6 (
    .CLK(CLK32),
    .D(D32[11:8]),
    .DIR(DIR32),
    .ENB(ENB32),
    .MODO({ MODO32[1], wMODO32[0] }),
    .Q(wQ32[11:8]),
    .S_IN(wR6SIN),
    .S_OUT()
  );
  (* src = "reg_desp_32.v:72" *)
  reg_desp reg7 (
    .CLK(CLK32),
    .D(D32[7:4]),
    .DIR(DIR32),
    .ENB(ENB32),
    .MODO({ MODO32[1], wMODO32[0] }),
    .Q(wQ32[7:4]),
    .S_IN(wR7SIN),
    .S_OUT()
  );
  (* src = "reg_desp_32.v:75" *)
  reg_desp reg8 (
    .CLK(CLK32),
    .D(D32[3:0]),
    .DIR(DIR32),
    .ENB(ENB32),
    .MODO({ MODO32[1], wMODO32[0] }),
    .Q(wQ32[3:0]),
    .S_IN(wR8SIN),
    .S_OUT()
  );
  assign Q32 = wQ32;
  assign S_OUT32 = wS_OUT32;
  assign wCLK32 = CLK32;
  assign wD32 = D32;
  assign wDIR32 = DIR32;
  assign wENB32 = ENB32;
  assign wMODO32[1] = MODO32[1];
  assign wR1Q0 = wQ32[28];
  assign wR1Q3 = wQ32[31];
  assign wR2Q0 = wQ32[24];
  assign wR2Q3 = wQ32[27];
  assign wR3Q0 = wQ32[20];
  assign wR3Q3 = wQ32[23];
  assign wR4Q0 = wQ32[16];
  assign wR4Q3 = wQ32[19];
  assign wR5Q0 = wQ32[12];
  assign wR5Q3 = wQ32[15];
  assign wR6Q0 = wQ32[8];
  assign wR6Q3 = wQ32[11];
  assign wR7Q0 = wQ32[4];
  assign wR7Q3 = wQ32[7];
  assign wR8Q0 = wQ32[0];
  assign wR8Q3 = wQ32[3];
  assign wS_IN32 = S_IN32;
endmodule
